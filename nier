#!/usr/bin/env bash

RESET='\033[0m'
BOLD='\033[1m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'

BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'

SUCCESS_SYMBOL="✓"
ERROR_SYMBOL="✗"
WARNING_SYMBOL="⚠"
INFO_SYMBOL="i"
ARROW_SYMBOL="➜"
QUESTION_SYMBOL="?"
EXIT_SYMBOL="☠"

function log () {
    printf "%s\n" "$1"
}

function log_empty_line () {
    printf "\n"
}

function log_header () {
    printf "• %b%s%b\n" "${WHITE}" "$1" "${RESET}"
    log ""
}

function log_info () {
    printf "\r    [ %b%s%b ] %s\n" "${WHITE}" "${INFO_SYMBOL}" "${RESET}" "$1"
}

function log_arrow () {
    printf "  %b%s %b%s%b\n" "${BLUE}" "${ARROW_SYMBOL}" "${italic}" "$1" "${RESET}"
    log ""
}

function log_question () {
    printf "    [ %b%s%b ] %s : " "${CYAN}" "${QUESTION_SYMBOL}" "${RESET}" "$1"
}

function log_wait () {
    printf "\r    [ %s ] %s" " " "$1"
}

function log_success () {
    printf "\r    [ %b%s%b ] %s\n" "${GREEN}" "${SUCCESS_SYMBOL}" "${RESET}" "$1"
}

function log_warn () {
    printf "    [ %b%s%b ] %s\n" "${YELLOW}" "${WARNING_SYMBOL}" "${RESET}" "$1"
}

function log_error () {
    printf "\r    [ %b%s%b ] %s\n" "${RED}" "${ERROR_SYMBOL}" "${RESET}" "$1"
}

function log_error_stream() {
    while read -r line; do
        print_error "↳ ERROR: $line"
    done
}

function log_result () {
    if [ "$1" = "0" ] ; then
        log_success "$2"
    else
        log_error "$2"
    fi
}

function log_exit () {
    if [ "$1" = "0" ] ; then
        log_success "$2"
        return 0
    else
        printf "\n\n%b%s%b\n\n" "${RED}" "↳ EXIT: $2" "${reset}"
        exit 1
    fi
}

function verify_darwin_os () {
    if [ "$(uname -s)" != "Darwin" ]; then
        return 1
    else
        return 0
    fi
}

function has () {
    command -v "$1" &> /dev/null
}

function ask_for_confirmation () {
    log_question "$1 (y/n) "
    read -r -n 1
    printf "\n"
}

function answer_for_confirmation () {
    [[ "${REPLY}" =~ ^[Yy]$ ]] && return 0 || return 1
}

function ask_for_sudo () {

    # Ask for the administrator password upfront.
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &
}

function restart () {
    ask_for_confirmation "Do you want to restart"
    if ! answer_for_confirmation; then
        return 0
    fi
    sudo shutdown -r now &> /dev/null
}

function check_available_updates () {
    tmp_file="$(mktemp /tmp/XXXXX)"
    softwareupdate -l &> "${tmp_file}"

    if cat "${tmp_file}" | grep -q "\*"; then
        return 0
    fi
    return 1
}

function install_available_updates () {
    if check_available_updates ; then
        log_info "An update is available."
        ask_for_confirmation "Do you want to install them ?"
        if answer_for_confirmation ; then
            sudo softwareupdate -ia
        fi

        if answer_for_confirmation "Do you want to restart ? (recommended)"; then
            restart
        fi
    else
        log_warn "OSX is up-to-date"
    fi
}

function install_homebrew () {
    if ! has "brew" ; then
        printf "\n" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" &> /dev/null
        #  └─ simulate the ENTER keypress
        log_exit $? "Homebrew"
    else
        log_warn "Homebrew already installed"
        log_empty_line
        return 0
    fi
}

function install_mas () {
    if ! has "brew" ; then
        log_exit "1" "Homebrew is not installed"
    else
        brew install mas
    fi
}

################################################################################
# Main
################################################################################

log ""
log "###############################################" $red
log "#        DO NOT RUN THIS SCRIPT BLINDLY       #" $red
log "#         YOU'LL PROBABLY REGRET IT...        #" $red
log "#                                             #" $red
log "#              READ IT THOROUGHLY             #" $red
log "#         AND EDIT TO SUIT YOUR NEEDS         #" $red
log "###############################################" $red
log ""

# ------------------------------------------------------------------------------

log_header "Pre-Check"

if ! verify_darwin_os "Darwin"; then
    log_exit "1" "You are not on MacOS. Exiting script..."
fi

ask_for_confirmation "Have you read through the script you're about to run ?"
if ! answer_for_confirmation ; then
    log_exit "1" "Read the entire script before re-launch the script"
fi


ask_for_confirmation "Did you understand that it will make changes to your computer ?"
if ! answer_for_confirmation ; then
    log_exit "1" "Read the entire script before re-launch the script"
fi

# ------------------------------------------------------------------------------

log_header "XCode Command Line Tools"

log_arrow "Install Homebrew"
xcode-select --install &> /dev/null
log_exit "$?" "Install Xcode Command Line Tools"

log_arrow "Install Homebrew"
sudo xcode-select --switch /Library/Developer/CommandLineTools
log_exit "$?" "Switch to ${DEVELOPER_DIR}"

# ------------------------------------------------------------------------------

log_header "Homebrew"

log_arrow "Install Homebrew"
install_homebrew

log_arrow "Install Mas"
install_mas

log_arrow "Install Brew Packages"
brew bundle --file "./homebrew/Brewfile"
